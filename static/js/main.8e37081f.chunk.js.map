{"version":3,"sources":["components/Board/Board.module.css","redux/board-reducer.js","redux/redux-store.js","components/Footer/Footer.jsx","components/Board/Texts/Texts.jsx","components/Board/Texts/Texts_2.jsx","components/Board/Texts/Texts_3.jsx","components/Board/Board.jsx","components/Board/BoardContainer.jsx","App.js","serviceWorker.js","index.js","components/Footer/Footer.module.css"],"names":["module","exports","initialState","boardData_1","id","uuid","text","description","boardData_2","boardData_3","newText","elementId","boardReducer","state","action","type","textCard","length","newCard","newItem","payload","find","item","map","newDescription","reducers","combineReducers","board","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","__store__","Footer","className","style","contacts","Modal","setAppElement","Texts","props","useState","modalIsOpen","setModalIsOpen","setDescription","editText","setEditText","React","createRef","isToggleFalse","history","back","textBlock","onClick","pushState","modal","isOpen","onRequestClose","popUp","textBlockModal","title","closeIcon","ref","autoFocus","onBlur","current","value","editHeader","isToggleDeactivated","descriptionBlock","onChange","e","target","placeholder","buttonBlockModal","addDescription","onAddDescription","inputAddButtonModal","Texts_2","Texts_3","Board","memo","editMode_1","setEditMode_1","editMode_2","setEditMode_2","editMode_3","setEditMode_3","data_1","data_2","data_3","activateEditMode","addElementId","deactivateEditMode","addCard_1","addCard_2","addCard_3","setOut","onChangeText","changeText","boardTexts_1","t","key","boardTexts_2","boardTexts_3","mainBlock","atWorkBlock","blockElements","addCard","width","height","viewBox","fill","xmlns","d","inputAddText","buttonBlock","onMouseDown","inputAddButton","inputCancelButton","BoardContainer","this","changeDescription","Component","connect","editData","descriptionData","App","exact","path","render","to","AppContainer","withRouter","MainApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e37081f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Board_mainBlock__1oRsf\",\"atWorkBlock\":\"Board_atWorkBlock__1e9Hp\",\"blockElements\":\"Board_blockElements__2ahw_\",\"textBlock\":\"Board_textBlock__1ilPJ\",\"addCard\":\"Board_addCard__286zl\",\"inputAddText\":\"Board_inputAddText__1y2jV\",\"buttonBlock\":\"Board_buttonBlock__EFaNz\",\"inputAddButton\":\"Board_inputAddButton__3HuiI\",\"inputCancelButton\":\"Board_inputCancelButton__Dye7D\",\"modal\":\"Board_modal__1LTL_\",\"popUp\":\"Board_popUp__1ybpX\",\"textBlockModal\":\"Board_textBlockModal__QhPWx\",\"closeIcon\":\"Board_closeIcon___-gBO\",\"text\":\"Board_text__1nCdw\",\"descriptionBlock\":\"Board_descriptionBlock__1D2sy\",\"buttonBlockModal\":\"Board_buttonBlockModal__1-CLz\",\"inputAddButtonModal\":\"Board_inputAddButtonModal__1XVRp\"};","import uuid from 'uuid/dist/v4';\r\n\r\nconst ADD_CARD_1 = 'ADD_CARD_1';\r\nconst ADD_CARD_2 = 'ADD_CARD_2';\r\nconst ADD_CARD_3 = 'ADD_CARD_3';\r\nconst CHANGE_TEXT = 'CHANGE_TEXT';\r\nconst ADD_ELEMENT_ID = 'ADD_ELEMENT_ID';\r\nconst ADD_DESCRIPTION = 'ADD_DESCRIPTION';\r\nconst EDIT_HEADER = 'EDIT_HEADER';\r\n\r\nlet initialState = {\r\n    boardData_1: [\r\n        {\r\n            id: uuid(),\r\n            text: 'Пример текста карточки',\r\n            description: ''\r\n        },\r\n        {\r\n            id: uuid(),\r\n            text: 'Пример длинного текста карточки, до такого чтобы он вообще не поместился',\r\n            description: ''\r\n        }\r\n    ],\r\n    boardData_2: [],\r\n    boardData_3: [],\r\n\r\n    newText: '',\r\n    elementId: []\r\n}\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CARD_1: {\r\n            if (action.textCard.length === 0) {\r\n                return state;\r\n            } else {\r\n                let newCard = {\r\n                    id: uuid(),\r\n                    text: action.textCard\r\n                }\r\n                return {\r\n                    ...state,\r\n                    boardData_1: [...state.boardData_1, newCard],\r\n                    newText: ''\r\n                };\r\n            }\r\n        }\r\n        case ADD_CARD_2: {\r\n            if (action.textCard.length === 0) {\r\n                return state;\r\n            } else {\r\n                let newCard = {\r\n                    id: uuid(),\r\n                    text: action.textCard\r\n                }\r\n                return {\r\n                    ...state,\r\n                    boardData_2: [...state.boardData_2, newCard],\r\n                    newText: ''\r\n                };\r\n            }\r\n        }\r\n        case ADD_CARD_3: {\r\n            if (action.textCard.length === 0) {\r\n                return state;\r\n            } else {\r\n                let newCard = {\r\n                    id: uuid(),\r\n                    text: action.textCard\r\n                }\r\n                return {\r\n                    ...state,\r\n                    boardData_3: [...state.boardData_3, newCard],\r\n                    newText: ''\r\n                };\r\n            }\r\n        }\r\n        case ADD_DESCRIPTION: {\r\n            const {payload: newItem} = action;\r\n\r\n            if (state.boardData_1.find(item => item.id === newItem.id)) {\r\n                return {\r\n                    ...state,\r\n                    boardData_1: state.boardData_1.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                description: newItem.newDescription\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                    newDescription: ''\r\n                };\r\n            } else if (state.boardData_2.find(item => item.id === newItem.id)) {\r\n                return {\r\n                    ...state,\r\n                    boardData_2: state.boardData_2.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                description: newItem.newDescription\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                    newDescription: ''\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    boardData_3: state.boardData_3.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                description: newItem.newDescription\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                    newDescription: ''\r\n                };\r\n            }\r\n        }\r\n        case CHANGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newText: action.text,\r\n            };\r\n        }\r\n        case EDIT_HEADER: {\r\n            const {payload: newItem} = action;\r\n            if (state.boardData_1.find(item => item.id === newItem.id)) {\r\n                return {\r\n                    ...state,\r\n                    boardData_1: state.boardData_1.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                text: newItem.text\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                };\r\n            } else if (state.boardData_2.find(item => item.id === newItem.id)) {\r\n                return {\r\n                    ...state,\r\n                    boardData_2: state.boardData_2.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                text: newItem.text\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    boardData_3: state.boardData_3.map(item => {\r\n                        if (item.id === newItem.id) {\r\n                            return {\r\n                                ...item,\r\n                                text: newItem.text\r\n                            }\r\n                        }\r\n                        return item;\r\n                    }),\r\n                };\r\n            }\r\n        }\r\n        case ADD_ELEMENT_ID: {\r\n            return {\r\n                ...state,\r\n                elementId: action.id,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const changeText = (text) => {\r\n    return {\r\n        type: CHANGE_TEXT, text\r\n    }\r\n}\r\n\r\nexport const editHeader = (editData) => {\r\n    return {\r\n        type: EDIT_HEADER, payload: editData\r\n    }\r\n}\r\n\r\nexport const addCard_1 = (textCard) => {\r\n    return {\r\n        type: ADD_CARD_1, textCard\r\n    }\r\n}\r\nexport const addCard_2 = (textCard) => {\r\n    return {\r\n        type: ADD_CARD_2, textCard\r\n    }\r\n}\r\nexport const addCard_3 = (textCard) => {\r\n    return {\r\n        type: ADD_CARD_3, textCard\r\n    }\r\n}\r\n\r\nexport const addDescription = (descriptionData) => {\r\n    return {\r\n        type: ADD_DESCRIPTION, payload: descriptionData\r\n    }\r\n}\r\n\r\nexport const addElementId = (id) => {\r\n    return {\r\n        type: ADD_ELEMENT_ID, id\r\n    }\r\n}\r\n\r\nexport default boardReducer;","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport boardReducer from \"./board-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    board: boardReducer,\r\n    form: formReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport style from \"./Footer.module.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <span>Все права защищены 2020 <sup>&copy;</sup></span>\r\n\r\n            <div className={style.contacts}>\r\n                <span>Контакты автора:</span> <br />\r\n                <span>Номер телефона: +7 905 437 98-77</span>\r\n                <span>Электронная почта: brabus-20@mail.ru</span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {useState} from \"react\";\r\nimport style from \"../Board.module.css\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Texts = (props) => {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [editText, setEditText] = useState(false)\r\n\r\n    let newText = React.createRef();\r\n\r\n    const isToggleTrue = () => {\r\n        window.history.pushState({}, '', '/modal')\r\n        setModalIsOpen(true)\r\n    }\r\n\r\n    const isToggleFalse = () => {\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    const isToggleActivated = () => {\r\n        setEditText(true)\r\n    }\r\n\r\n    const isToggleDeactivated = (id) => {\r\n        let text = newText.current.value;\r\n        props.editHeader({text, id})\r\n        setEditText(false)\r\n    }\r\n\r\n    const onChangeDescription = (e) => {\r\n        let description = e.target.value;\r\n        setDescription(description)\r\n    }\r\n\r\n    const onAddDescription = (id) => {\r\n        let newDescription = description;\r\n        props.addDescription({newDescription, id})\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={style.textBlock}>\r\n                <span onClick={() => {\r\n                    isToggleTrue()\r\n                }}><p>{props.text}</p></span>\r\n            </div>\r\n            <Modal className={style.modal} isOpen={modalIsOpen} onRequestClose={() => {\r\n                isToggleFalse()\r\n            }}>\r\n                <div className={style.popUp}>\r\n                    <div className={style.textBlockModal}>\r\n                        <span title={'Закрыть'} className={style.closeIcon} onClick={() => {\r\n                            isToggleFalse()\r\n                        }}/>\r\n                        <div className={style.text}>\r\n                            {!editText &&\r\n                            <p onClick={() => {\r\n                                isToggleActivated()\r\n                            }} title='Редактировать заголовок'>{props.text}</p>\r\n                            }\r\n                            {editText &&\r\n                            <textarea type=\"text\" ref={newText} autoFocus={true} onBlur={() => {\r\n                                isToggleDeactivated(props.id)\r\n                            }}>{props.text}</textarea>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className={style.descriptionBlock}>\r\n                            <textarea type=\"text\" onChange={onChangeDescription}\r\n                                      placeholder='Описание'>{props.description}</textarea>\r\n                        </div>\r\n\r\n                        <div className={style.buttonBlockModal}>\r\n                            <input type=\"button\" onClick={() => {\r\n                                onAddDescription(props.id)\r\n                            }} value=\"Сохранить\"\r\n                                   className={style.inputAddButtonModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Texts;","import React, {useState} from \"react\";\r\nimport style from \"../Board.module.css\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Texts_2 = (props) => {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [editText, setEditText] = useState(false)\r\n\r\n    let newText = React.createRef();\r\n\r\n    const isToggleTrue = () => {\r\n        window.history.pushState({}, '', '/modal')\r\n        setModalIsOpen(true)\r\n    }\r\n\r\n    const isToggleFalse = () => {\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    const isToggleActivated = () => {\r\n        setEditText(true)\r\n    }\r\n\r\n    const isToggleDeactivated = (id) => {\r\n        let text = newText.current.value;\r\n        props.editHeader({text, id})\r\n        setEditText(false)\r\n    }\r\n\r\n    const onChangeDescription = (e) => {\r\n        let description = e.target.value;\r\n        setDescription(description)\r\n    }\r\n\r\n    const onAddDescription = (id) => {\r\n        let newDescription = description;\r\n        props.addDescription({newDescription, id})\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={style.textBlock}>\r\n                <span onClick={() => {\r\n                    isToggleTrue()\r\n                }}><p>{props.text}</p></span>\r\n            </div>\r\n            <Modal className={style.modal} isOpen={modalIsOpen} onRequestClose={() => {\r\n                isToggleFalse()\r\n            }}>\r\n                <div className={style.popUp}>\r\n                    <div className={style.textBlockModal}>\r\n                        <span title={'Закрыть'} className={style.closeIcon} onClick={() => {\r\n                            isToggleFalse()\r\n                        }}/>\r\n                        <div className={style.text}>\r\n                            {!editText &&\r\n                            <p onClick={() => {\r\n                                isToggleActivated()\r\n                            }} title='Редактировать заголовок'>{props.text}</p>\r\n                            }\r\n                            {editText &&\r\n                            <textarea type=\"text\" ref={newText} autoFocus={true} onBlur={() => {\r\n                                isToggleDeactivated(props.id)\r\n                            }}>{props.text}</textarea>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className={style.descriptionBlock}>\r\n                            <textarea type=\"text\" onChange={onChangeDescription}\r\n                                      placeholder='Описание'>{props.description}</textarea>\r\n                        </div>\r\n\r\n                        <div className={style.buttonBlockModal}>\r\n                            <input type=\"button\" onClick={() => {\r\n                                onAddDescription(props.id)\r\n                            }} value=\"Сохранить\"\r\n                                   className={style.inputAddButtonModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Texts_2;","import React, {useState} from \"react\";\r\nimport style from \"../Board.module.css\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Texts_3 = (props) => {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [editText, setEditText] = useState(false)\r\n\r\n    let newText = React.createRef();\r\n\r\n    const isToggleTrue = () => {\r\n        window.history.pushState({}, '', '/modal')\r\n        setModalIsOpen(true)\r\n    }\r\n\r\n    const isToggleFalse = () => {\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    const isToggleActivated = () => {\r\n        setEditText(true)\r\n    }\r\n\r\n    const isToggleDeactivated = (id) => {\r\n        let text = newText.current.value;\r\n        props.editHeader({text, id})\r\n        setEditText(false)\r\n    }\r\n\r\n    const onChangeDescription = (e) => {\r\n        let description = e.target.value;\r\n        setDescription(description)\r\n    }\r\n\r\n    const onAddDescription = (id) => {\r\n        let newDescription = description;\r\n        props.addDescription({newDescription, id})\r\n        window.history.back()\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={style.textBlock}>\r\n                <span onClick={() => {\r\n                    isToggleTrue()\r\n                }}><p>{props.text}</p></span>\r\n            </div>\r\n            <Modal className={style.modal} isOpen={modalIsOpen} onRequestClose={() => {\r\n                isToggleFalse()\r\n            }}>\r\n                <div className={style.popUp}>\r\n                    <div className={style.textBlockModal}>\r\n                        <span title={'Закрыть'} className={style.closeIcon} onClick={() => {\r\n                            isToggleFalse()\r\n                        }}/>\r\n                        <div className={style.text}>\r\n                            {!editText &&\r\n                            <p onClick={() => {\r\n                                isToggleActivated()\r\n                            }} title='Редактировать заголовок'>{props.text}</p>\r\n                            }\r\n                            {editText &&\r\n                            <textarea type=\"text\" ref={newText} autoFocus={true} onBlur={() => {\r\n                                isToggleDeactivated(props.id)\r\n                            }}>{props.text}</textarea>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className={style.descriptionBlock}>\r\n                            <textarea type=\"text\" onChange={onChangeDescription}\r\n                                      placeholder='Описание'>{props.description}</textarea>\r\n                        </div>\r\n\r\n                        <div className={style.buttonBlockModal}>\r\n                            <input type=\"button\" onClick={() => {\r\n                                onAddDescription(props.id)\r\n                            }} value=\"Сохранить\"\r\n                                   className={style.inputAddButtonModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Texts_3;","import React, {useState} from \"react\";\r\nimport style from \"./Board.module.css\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport Texts from \"./Texts/Texts\";\r\nimport Texts_2 from \"./Texts/Texts_2\";\r\nimport Texts_3 from \"./Texts/Texts_3\";\r\n\r\n\r\nconst Board = React.memo(props => {\r\n\r\n    let [editMode_1, setEditMode_1] = useState(false);\r\n    let [editMode_2, setEditMode_2] = useState(false);\r\n    let [editMode_3, setEditMode_3] = useState(false);\r\n\r\n    const [data_1] = [props.boardData_1];\r\n    const [data_2] = [props.boardData_2];\r\n    const [data_3] = [props.boardData_3];\r\n\r\n    const activateEditMode = (id) => {\r\n        props.addElementId(id)\r\n        if (id === data_1) {\r\n            setEditMode_1(true)\r\n        } else if (id === data_2) {\r\n            setEditMode_2(true)\r\n        } else {\r\n            setEditMode_3(true)\r\n        }\r\n    }\r\n\r\n    const deactivateEditMode = (id) => {\r\n        if (id === data_1) {\r\n            props.addCard_1(props.newText)\r\n            setEditMode_1(false)\r\n        } else if (id === data_2) {\r\n            props.addCard_2(props.newText)\r\n            setEditMode_2(false)\r\n        } else {\r\n            props.addCard_3(props.newText)\r\n            setEditMode_3(false)\r\n        }\r\n    }\r\n\r\n    const setOut = (id) => {\r\n        if (id === data_1) {\r\n            setEditMode_1(false)\r\n        } else if (id === data_2) {\r\n            setEditMode_2(false)\r\n        } else {\r\n            setEditMode_3(false)\r\n        }\r\n    }\r\n\r\n    const onChangeText = (e) => {\r\n        let text = e.target.value;\r\n        props.changeText(text)\r\n    }\r\n\r\n    let boardTexts_1 =\r\n        [...props.boardData_1]\r\n            .map((t) => <Texts\r\n                id={t.id}\r\n                key={t.id}\r\n                text={t.text}\r\n                description={t.description}\r\n                newDescription={props.newDescription}\r\n                addDescription={props.addDescription}\r\n                editHeader={props.editHeader}\r\n            />);\r\n    let boardTexts_2 =\r\n        [...props.boardData_2]\r\n            .map((t) => <Texts_2\r\n                id={t.id}\r\n                key={t.id}\r\n                text={t.text}\r\n                description={t.description}\r\n                newDescription={props.newDescription}\r\n                addDescription={props.addDescription}\r\n                editHeader={props.editHeader}\r\n            />);\r\n    let boardTexts_3 =\r\n        [...props.boardData_3]\r\n            .map((t) => <Texts_3\r\n                id={t.id}\r\n                key={t.id}\r\n                text={t.text}\r\n                description={t.description}\r\n                newDescription={props.newDescription}\r\n                addDescription={props.addDescription}\r\n                editHeader={props.editHeader}\r\n            />);\r\n\r\n    return (\r\n        <>\r\n            <div className={style.mainBlock}>\r\n                <div className={style.atWorkBlock}>\r\n                    <div className={style.blockElements}>\r\n\r\n                        <h3>В работе</h3>\r\n\r\n                        {boardTexts_1}\r\n\r\n                        {!editMode_1 &&\r\n                        <div className={style.addCard} onClick={() => {\r\n                            activateEditMode(data_1)\r\n                        }}>\r\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M14 8H8V14H6V8H0V6H6V0H8V6H14V8Z\" fill=\"#626262\"/>\r\n                            </svg>\r\n\r\n                            <span>Добавить еще одну карточку</span>\r\n                        </div>\r\n                        }\r\n                        {editMode_1 &&\r\n                        <div onBlur={() => {\r\n                            setOut(data_1)\r\n                        }}>\r\n                            <input type=\"text\" placeholder='Введите текст карточки' value={props.newText}\r\n                                   className={style.inputAddText} autoFocus={true}\r\n                                   onChange={onChangeText}/>\r\n\r\n                            <div className={style.buttonBlock}>\r\n                                <input type=\"button\" onMouseDown={() => {\r\n                                    deactivateEditMode(data_1)\r\n                                }} value=\"Добавить карточку\"\r\n                                       className={style.inputAddButton}/>\r\n\r\n                                <input type=\"button\" onClick={() => {\r\n                                    setOut(data_1)\r\n                                }} value=\"Отмена\" className={style.inputCancelButton}/>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={style.atWorkBlock}>\r\n                    <div className={style.blockElements}>\r\n\r\n                        <h3>На проверке</h3>\r\n\r\n                        {boardTexts_2}\r\n\r\n                        {!editMode_2 &&\r\n                        <div className={style.addCard} onClick={() => {\r\n                            activateEditMode(data_2)\r\n                        }}>\r\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M14 8H8V14H6V8H0V6H6V0H8V6H14V8Z\" fill=\"#626262\"/>\r\n                            </svg>\r\n\r\n                            <span>Добавить еще одну карточку</span>\r\n                        </div>\r\n                        }\r\n                        {editMode_2 &&\r\n                        <div onBlur={() => {\r\n                            setOut(data_2)\r\n                        }}>\r\n                            <input type=\"text\" placeholder='Введите текст карточки' value={props.newText}\r\n                                   className={style.inputAddText}\r\n                                   autoFocus={true} onChange={onChangeText}/>\r\n\r\n                            <div className={style.buttonBlock}>\r\n                                <input type=\"button\" onMouseDown={() => {\r\n                                    deactivateEditMode(data_2)\r\n                                }} value=\"Добавить карточку\"\r\n                                       className={style.inputAddButton}/>\r\n\r\n                                <input type=\"button\" onClick={() => {\r\n                                    setOut(data_2)\r\n                                }} value=\"Отмена\" className={style.inputCancelButton}/>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={style.atWorkBlock}>\r\n                    <div className={style.blockElements}>\r\n\r\n                        <h3>Выполнено</h3>\r\n\r\n                        {boardTexts_3}\r\n\r\n                        {!editMode_3 &&\r\n                        <div className={style.addCard} onClick={() => {\r\n                            activateEditMode(data_3)\r\n                        }}>\r\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M14 8H8V14H6V8H0V6H6V0H8V6H14V8Z\" fill=\"#626262\"/>\r\n                            </svg>\r\n\r\n                            <span>Добавить еще одну карточку</span>\r\n                        </div>\r\n                        }\r\n                        {editMode_3 &&\r\n                        <div onBlur={() => {\r\n                            setOut(data_3)\r\n                        }}>\r\n                            <input type=\"text\" placeholder='Введите текст карточки' value={props.newText}\r\n                                   className={style.inputAddText}\r\n                                   autoFocus={true} onChange={onChangeText}/>\r\n\r\n                            <div className={style.buttonBlock}>\r\n                                <input type=\"button\" onMouseDown={() => {\r\n                                    deactivateEditMode(data_3)\r\n                                }} value=\"Добавить карточку\"\r\n                                       className={style.inputAddButton}/>\r\n\r\n                                <input type=\"button\" onClick={() => {\r\n                                    setOut(data_3)\r\n                                }} value=\"Отмена\" className={style.inputCancelButton}/>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Footer/>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Board;","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    addCard_1, addCard_2, addCard_3, addDescription,\r\n    addElementId, changeText, editHeader,\r\n} from \"../../redux/board-reducer\";\r\n\r\nclass BoardContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Board\r\n                    boardData_1={this.props.boardData_1}\r\n                    boardData_2={this.props.boardData_2}\r\n                    boardData_3={this.props.boardData_3}\r\n                    changeText={this.props.changeText}\r\n                    editHeader={this.props.editHeader}\r\n                    changeDescription={this.props.changeDescription}\r\n                    addCard_1={this.props.addCard_1}\r\n                    addCard_2={this.props.addCard_2}\r\n                    addCard_3={this.props.addCard_3}\r\n                    addDescription={this.props.addDescription}\r\n                    addElementId={this.props.addElementId}\r\n                    newText={this.props.newText}\r\n                    newDescription={this.props.newDescription}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    boardData_1: state.board.boardData_1,\r\n    boardData_2: state.board.boardData_2,\r\n    boardData_3: state.board.boardData_3,\r\n    newText: state.board.newText,\r\n    newDescription: state.board.newDescription\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {changeText, editHeader, addCard_1, addCard_2, addCard_3, addDescription, addElementId})(BoardContainer));","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, Redirect, Route, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport BoardContainer from \"./components/Board/BoardContainer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    <Route exact path='/kanban-board' render={() => <Redirect to={'/board'} />} />\n                    <div>\n                        <Route exact path='/' render={() => <Redirect to={'/board'} />} />\n                        <Route path='/board' render={() => <BoardContainer />} />\n                    </div>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nlet AppContainer = compose(\n    withRouter,\n    connect()\n)(App);\n\nconst MainApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default MainApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Footer_contacts__2bUFY\"};"],"sourceRoot":""}